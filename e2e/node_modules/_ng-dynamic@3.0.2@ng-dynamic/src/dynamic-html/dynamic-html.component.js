import { Component, ElementRef, Input, } from '@angular/core';
import { DynamicHTMLRenderer } from './renderer';
/**
 * ComponentOutlet is a directive to create dynamic component.
 *
 * Example:
 *
 * ```ts
 * @Component({
 *   selector: 'my-app',
 *   template: `
 *     <dynamic-html [content]="content"></dynamic-html>
 *   `
 * })
 * export class AppComponent {
 *   content = `
 *   <article>
 *     <h1>Awesome Document</h1>
 *     <div>
 *       <p>bla bla bla</p>
 *       <my-button></my-button>
 *     </div>
 *   </article>
 *   `;
 * }
 * ```
 *
 */
var DynamicHTMLComponent = (function () {
    function DynamicHTMLComponent(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.ref = null;
    }
    DynamicHTMLComponent.prototype.ngOnChanges = function (_) {
        if (this.ref) {
            this.ref.destroy();
            this.ref = null;
        }
        if (this.content && this.elementRef) {
            this.ref = this.renderer.renderInnerHTML(this.elementRef, this.content);
        }
    };
    DynamicHTMLComponent.prototype.ngDoCheck = function () {
        if (this.ref) {
            this.ref.check();
        }
    };
    DynamicHTMLComponent.prototype.ngOnDestroy = function () {
        if (this.ref) {
            this.ref.destroy();
            this.ref = null;
        }
    };
    return DynamicHTMLComponent;
}());
export { DynamicHTMLComponent };
DynamicHTMLComponent.decorators = [
    { type: Component, args: [{
                selector: 'dynamic-html',
                template: '',
            },] },
];
/** @nocollapse */
DynamicHTMLComponent.ctorParameters = function () { return [
    { type: DynamicHTMLRenderer, },
    { type: ElementRef, },
]; };
DynamicHTMLComponent.propDecorators = {
    'content': [{ type: Input },],
};
