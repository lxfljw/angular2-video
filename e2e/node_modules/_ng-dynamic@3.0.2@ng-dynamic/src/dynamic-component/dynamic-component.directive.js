import { Component, Compiler, Directive, Input, NgModule, ViewContainerRef, ReflectiveInjector } from '@angular/core';
import { DynamicComponentOptions } from './options';
/**
 * DynamicComponent is a directive to create dynamic component.
 *
 * Example:
 *
 * ```ts
 * @Component({
 *   selector: 'my-app',
 *   template: `
 *     <div *dynamicComponent="template; context: self; selector:'my-component'"></div>
 *   `
 * })
 * export class AppComponent {
 *   self = this;
 *
 *   template = `
 *   <div>
 *     <p>Dynamic Component</p>
 *   </div>`;
 * }
 * ```
 *
 * Result:
 *
 * ```html
 * <my-component>
 *    <div>
 *      <p>Dynamic Component</p>
 *    </div>
 * </my-component>
 * ```
 *
 */
var DynamicComponentDirective = (function () {
    function DynamicComponentDirective(options, vcRef, compiler) {
        this.options = options;
        this.vcRef = vcRef;
        this.compiler = compiler;
    }
    DynamicComponentDirective.prototype.createComponentType = function () {
        var metadata = new Component({
            selector: this.selector,
            template: this.template,
        });
        var cmpClass = (function () {
            function _() {
            }
            return _;
        }());
        return Component(metadata)(cmpClass);
    };
    DynamicComponentDirective.prototype.createNgModuleType = function (componentType) {
        var declarations = [].concat(this.options.ngModuleMetadata.declarations || []);
        declarations.push(componentType);
        var moduleMeta = {
            imports: this.options.ngModuleMetadata.imports,
            providers: this.options.ngModuleMetadata.providers,
            schemas: this.options.ngModuleMetadata.schemas,
            declarations: declarations
        };
        return NgModule(moduleMeta)((function () {
            function _() {
            }
            return _;
        }()));
    };
    DynamicComponentDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (!this.template) {
            return;
        }
        this.cmpType = this.createComponentType();
        this.moduleType = this.createNgModuleType(this.cmpType);
        var injector = ReflectiveInjector.fromResolvedProviders([], this.vcRef.parentInjector);
        this.compiler.compileModuleAndAllComponentsAsync(this.moduleType)
            .then(function (factory) {
            var cmpFactory;
            for (var i = factory.componentFactories.length - 1; i >= 0; i--) {
                if (factory.componentFactories[i].componentType === _this.cmpType) {
                    cmpFactory = factory.componentFactories[i];
                    break;
                }
            }
            return cmpFactory;
        }, function (error) {
        })
            .then(function (cmpFactory) {
            if (cmpFactory) {
                _this.vcRef.clear();
                _this.component = _this.vcRef.createComponent(cmpFactory, 0, injector);
                Object.assign(_this.component.instance, _this.context);
                _this.component.changeDetectorRef.detectChanges();
            }
        });
    };
    DynamicComponentDirective.prototype.ngOnDestroy = function () {
        if (this.component) {
            this.component.destroy();
        }
        if (this.compiler) {
            if (this.cmpType) {
                this.compiler.clearCacheFor(this.cmpType);
            }
            if (this.moduleType) {
                this.compiler.clearCacheFor(this.moduleType);
            }
        }
    };
    return DynamicComponentDirective;
}());
export { DynamicComponentDirective };
DynamicComponentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dynamicComponent]',
            },] },
];
/** @nocollapse */
DynamicComponentDirective.ctorParameters = function () { return [
    { type: DynamicComponentOptions, },
    { type: ViewContainerRef, },
    { type: Compiler, },
]; };
DynamicComponentDirective.propDecorators = {
    'template': [{ type: Input, args: ['dynamicComponent',] },],
    'selector': [{ type: Input, args: ['dynamicComponentSelector',] },],
    'context': [{ type: Input, args: ['dynamicComponentContext',] },],
};
